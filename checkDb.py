from models_bi.eta_metric_all import EtaMetricAllfrom configs import conffrom helpers.logger import Loggerfrom configs.ConfManage import ConfManageimport osimport arrowfrom process import processfrom argparse import ArgumentParserfrom stream_collect import mainlogger = Logger.get_instance(ConfManage.getString("LOG_CRON_NAME"))ENV_APP_MODE = ConfManage.getString("APP_MODE")ENV_ZONE = ConfManage.getString("ZONE")def check_collect():    """检查collect是否采集"""    pickle_prefix = os.getenv('ENV_PICKLE_PREFIX', '')    if pickle_prefix == '' and ENV_APP_MODE != 'release':        pickle_prefix = '%s-%s-' % (ENV_APP_MODE, ENV_ZONE)    filename = '%sdata.pkl' % (pickle_prefix)    file = './pickles/%s' % (filename)    collect_ctimes = 3    while collect_ctimes > 0:        try:            datacreattime = arrow.get(os.path.getctime(file)).date()        except FileNotFoundError as err:            logger.info(err)            main()            datacreattime = arrow.get(os.path.getctime(file)).date()        today = arrow.now().date()        if datacreattime != today:            main()            collect_ctimes -= 1        else:            logger.info("History's data in data.pkl!")            breakdef check_process():    """检查process是否写入bi数据库！"""    # data = load_pickle('data')    # prediction_date = data['order_time'].max().date()    prediction_date = arrow.now(tz=conf.ARROW_TIMEZONE).shift(days=-1).date()    estimator_name = 'xgb'    predict_target = []    for i in predict_target:        model_name = '%s_%s' % (estimator_name, i)        times = 0        while times <= 3:            if EtaMetricAll(mode='write').checkBidata(model_name, prediction_date=prediction_date):                logger.info('%s is in DB' % model_name)                break            else:                process(logger=logger, pickle='%s_data' % i, estimator='xgb', predict_target=i, withhold=True)                times += 1def check_preprocess():    """检查preprocess是否执行"""    pickle_prefix = os.getenv('ENV_PICKLE_PREFIX', '')    if pickle_prefix == '' and ENV_APP_MODE != 'release':        pickle_prefix = '%s-%s-' % (ENV_APP_MODE, ENV_ZONE)    predict_target = []    for i in predict_target:        filename = '%sxgb-%s.pkl' % (pickle_prefix,i)        file = './pickles/%s' % (filename)        preprocess_ctimes = 3        while preprocess_ctimes > 0:            pklcreattime = arrow.get(os.path.getctime(file)).date()            today = arrow.now().date()            if pklcreattime != today:                logger.error("{} model can't be produce".format(i))            else:                logger.info("New model save!")                break            preprocess_ctimes -= 1if __name__ == '__main__':    argument = ArgumentParser()    argument.add_argument('-m', '--method', help='check function.', type=str)    arg = argument.parse_args()    method = arg.method    if method in ['collect', 'preprocess', 'process']:        eval('check_' + method)()    else:        raise Exception("Agrs is not defined")    # check_collect()    # check_process()